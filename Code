import pygame
import time
import random
#initializes all of pygame modules
pygame.init()
#initializing all constants
black=(0,0,0)
white=(255,255,255)
red=(255,0,0)
green=(0,155,0)
display_width=800
display_height=600
block_size=10
score=[]
FPS=15
#drawing the canvas
gameDisplay=pygame.display.set_mode((display_width,display_height))
pygame.display.set_caption("Snake Game")
clock=pygame.time.Clock()
font=pygame.font.SysFont(None,25)
def snake(block_size,snakelist):
    for XnY in snakelist:
        pygame.draw.rect(gameDisplay,green,[XnY[0],XnY[1],block_size,block_size])
def message_to_screen(msg,color):
    screen_text=font.render(msg,True,color)
    gameDisplay.blit(screen_text,[display_width/2,display_height/2])
def gameLoop():
    gameExit=False
    gameOver=False
    lead_x=display_width/2
    lead_y=display_height/2
    lead_x_change=0
    lead_y_change=0
    snakeList=[]
    snakeLength=1
    randAppleX=round(random.randrange(0,display_width-block_size)/10.0)*10.0
    randAppleY=round(random.randrange(0,display_height-block_size)/10.0)*10.0
    while not gameExit:
        while gameOver==True:
            gameDisplay.fill(white)
            message_to_screen("Press Q: quit . C:Restart", red)
            pygame.display.update()
            for event in pygame.event.get():
                if event.type==pygame.KEYDOWN:
                    if event.key==pygame.K_q:
                        gameExit=True
                        gameOver=False
                        del score[:]
                    if event.key==pygame.K_c:
                        gameLoop()
                        del score[:]
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                gameExit=True
            if event.type==pygame.KEYDOWN:
                if event.key==pygame.K_LEFT:
                    lead_x_change= -block_size
                    lead_y_change= 0
                elif event.key==pygame.K_RIGHT:
                    lead_x_change= block_size
                    lead_y_change= 0
                elif event.key==pygame.K_UP:
                    lead_y_change=-block_size
                    lead_x_change=0
                elif event.key==pygame.K_DOWN:
                    lead_y_change=block_size
                    lead_x_change=0
        #IF SNAKE TOUCHES BOUNDARY, GAME ENDS            
        #if lead_x >= display_width or lead_x<0 or lead_y>=display_height or lead_y<0:
            #gameOver=True
        lead_x+=lead_x_change
        #IN CASE YOU DON'T WANT TO DIE ONCE SNAKE REACHES BEYOND BOUNDARY
        if lead_x<0:
           lead_x=display_width
        if lead_x > display_width:
            lead_x=0
        lead_y+=lead_y_change
        if lead_y<0:
            lead_y=display_height
        if lead_y > display_height:
            lead_y=0
        #background fill of canvas
        gameDisplay.fill(white)
        #one way of drawing a rectangle
        AppleThickness=10
        pygame.draw.rect(gameDisplay,red,[randAppleX,randAppleY,AppleThickness,AppleThickness])
        snakeHead=[]
        snakeHead.append(lead_x)
        snakeHead.append(lead_y)
        snakeList.append(snakeHead)
        if len(snakeList) > snakeLength:
            del snakeList[0]
        for eachSegment in snakeList[:-1]:
            if eachSegment == snakeHead:
                gameOver=True
        snake(block_size,snakeList)
        #another way of drawing a rectangle
        #gameDisplay.fill(red,rect=[200,200,50,50])
        pygame.display.update()
        if lead_x==randAppleX and lead_y==randAppleY:
            randAppleX=round(random.randrange(0,display_width-block_size)/10.0)*10.0
            randAppleY=round(random.randrange(0,display_height-block_size)/10.0)*10.0
            snakeLength+=1
            score.append('a')
##        if lead_x>=randAppleX and lead_x<=randAppleX+AppleThickNess:
##            if lead_y>=randAppleY and lead_y<=randAppleY+AppleThickNess:
##                randAppleX=round(random.randrange(0,display_width-block_size)/10.0)*10.0
##                randAppleY=round(random.randrange(0,display_height-block_size)/10.0)*10.0
##                snakeLength+=1

                
        clock.tick(FPS)
    pygame.quit()
    quit()
gameLoop()
